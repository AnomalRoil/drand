// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drand/protocol.proto

package drand

import (
	context "context"
	dkg "github.com/drand/drand/protobuf/crypto/dkg"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// BeaconRequest holds a link to a previous signature, a timestamp and the
// partial signature for this beacon. All participants send and collects many of
// theses partial beacon packets to recreate locally one beacon
type BeaconRequest struct {
	// Round is the round for which the beacon will be created from the partial
	// signatures
	Round uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	// PreviousRound is the round for which the beacon is building on top of
	// from.
	PreviousRound uint64 `protobuf:"varint,2,opt,name=previous_round,json=previousRound,proto3" json:"previous_round,omitempty"`
	// Embedding the partial signature in the request already allows the receive
	// to avoid requesting the signature itself, i.e. it saves time.
	//
	// In the current version, it also proves the issuer comes from a valid node
	// in the group - but authentication is coming in a much stronger form.
	PartialSig           []byte   `protobuf:"bytes,3,opt,name=partial_sig,json=partialSig,proto3" json:"partial_sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeaconRequest) Reset()         { *m = BeaconRequest{} }
func (m *BeaconRequest) String() string { return proto.CompactTextString(m) }
func (*BeaconRequest) ProtoMessage()    {}
func (*BeaconRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e344a98fea1e2f3a, []int{0}
}

func (m *BeaconRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconRequest.Unmarshal(m, b)
}
func (m *BeaconRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconRequest.Marshal(b, m, deterministic)
}
func (m *BeaconRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconRequest.Merge(m, src)
}
func (m *BeaconRequest) XXX_Size() int {
	return xxx_messageInfo_BeaconRequest.Size(m)
}
func (m *BeaconRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconRequest proto.InternalMessageInfo

func (m *BeaconRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *BeaconRequest) GetPreviousRound() uint64 {
	if m != nil {
		return m.PreviousRound
	}
	return 0
}

func (m *BeaconRequest) GetPartialSig() []byte {
	if m != nil {
		return m.PartialSig
	}
	return nil
}

type BeaconResponse struct {
	PartialSig           []byte   `protobuf:"bytes,1,opt,name=partial_sig,json=partialSig,proto3" json:"partial_sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeaconResponse) Reset()         { *m = BeaconResponse{} }
func (m *BeaconResponse) String() string { return proto.CompactTextString(m) }
func (*BeaconResponse) ProtoMessage()    {}
func (*BeaconResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e344a98fea1e2f3a, []int{1}
}

func (m *BeaconResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconResponse.Unmarshal(m, b)
}
func (m *BeaconResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconResponse.Marshal(b, m, deterministic)
}
func (m *BeaconResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconResponse.Merge(m, src)
}
func (m *BeaconResponse) XXX_Size() int {
	return xxx_messageInfo_BeaconResponse.Size(m)
}
func (m *BeaconResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconResponse proto.InternalMessageInfo

func (m *BeaconResponse) GetPartialSig() []byte {
	if m != nil {
		return m.PartialSig
	}
	return nil
}

type SetupPacket struct {
	Dkg                  *dkg.Packet `protobuf:"bytes,1,opt,name=dkg,proto3" json:"dkg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SetupPacket) Reset()         { *m = SetupPacket{} }
func (m *SetupPacket) String() string { return proto.CompactTextString(m) }
func (*SetupPacket) ProtoMessage()    {}
func (*SetupPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_e344a98fea1e2f3a, []int{2}
}

func (m *SetupPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetupPacket.Unmarshal(m, b)
}
func (m *SetupPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetupPacket.Marshal(b, m, deterministic)
}
func (m *SetupPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupPacket.Merge(m, src)
}
func (m *SetupPacket) XXX_Size() int {
	return xxx_messageInfo_SetupPacket.Size(m)
}
func (m *SetupPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupPacket.DiscardUnknown(m)
}

var xxx_messageInfo_SetupPacket proto.InternalMessageInfo

func (m *SetupPacket) GetDkg() *dkg.Packet {
	if m != nil {
		return m.Dkg
	}
	return nil
}

// Reshare is a wrapper around a Setup packet for resharing operation that
// serves two purposes: - indicate to non-leader old nodes that they should
// generate and send their deals - indicate to which new group are we resharing.
// drand should keep a list of new ready-to-operate groups allowed.
type ResharePacket struct {
	Dkg                  *dkg.Packet `protobuf:"bytes,1,opt,name=dkg,proto3" json:"dkg,omitempty"`
	GroupHash            string      `protobuf:"bytes,2,opt,name=group_hash,json=groupHash,proto3" json:"group_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResharePacket) Reset()         { *m = ResharePacket{} }
func (m *ResharePacket) String() string { return proto.CompactTextString(m) }
func (*ResharePacket) ProtoMessage()    {}
func (*ResharePacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_e344a98fea1e2f3a, []int{3}
}

func (m *ResharePacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResharePacket.Unmarshal(m, b)
}
func (m *ResharePacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResharePacket.Marshal(b, m, deterministic)
}
func (m *ResharePacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResharePacket.Merge(m, src)
}
func (m *ResharePacket) XXX_Size() int {
	return xxx_messageInfo_ResharePacket.Size(m)
}
func (m *ResharePacket) XXX_DiscardUnknown() {
	xxx_messageInfo_ResharePacket.DiscardUnknown(m)
}

var xxx_messageInfo_ResharePacket proto.InternalMessageInfo

func (m *ResharePacket) GetDkg() *dkg.Packet {
	if m != nil {
		return m.Dkg
	}
	return nil
}

func (m *ResharePacket) GetGroupHash() string {
	if m != nil {
		return m.GroupHash
	}
	return ""
}

// SyncRequest is from a node that needs to sync up with the current head of the
// chain
type SyncRequest struct {
	FromRound            uint64   `protobuf:"varint,1,opt,name=from_round,json=fromRound,proto3" json:"from_round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e344a98fea1e2f3a, []int{4}
}

func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRequest.Unmarshal(m, b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return xxx_messageInfo_SyncRequest.Size(m)
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

func (m *SyncRequest) GetFromRound() uint64 {
	if m != nil {
		return m.FromRound
	}
	return 0
}

// SyncResponse is basically a chain of beacon response
type SyncResponse struct {
	PreviousRound        uint64   `protobuf:"varint,1,opt,name=previous_round,json=previousRound,proto3" json:"previous_round,omitempty"`
	PreviousSig          []byte   `protobuf:"bytes,2,opt,name=previous_sig,json=previousSig,proto3" json:"previous_sig,omitempty"`
	Round                uint64   `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncResponse) Reset()         { *m = SyncResponse{} }
func (m *SyncResponse) String() string { return proto.CompactTextString(m) }
func (*SyncResponse) ProtoMessage()    {}
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e344a98fea1e2f3a, []int{5}
}

func (m *SyncResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncResponse.Unmarshal(m, b)
}
func (m *SyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncResponse.Marshal(b, m, deterministic)
}
func (m *SyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncResponse.Merge(m, src)
}
func (m *SyncResponse) XXX_Size() int {
	return xxx_messageInfo_SyncResponse.Size(m)
}
func (m *SyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncResponse proto.InternalMessageInfo

func (m *SyncResponse) GetPreviousRound() uint64 {
	if m != nil {
		return m.PreviousRound
	}
	return 0
}

func (m *SyncResponse) GetPreviousSig() []byte {
	if m != nil {
		return m.PreviousSig
	}
	return nil
}

func (m *SyncResponse) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *SyncResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*BeaconRequest)(nil), "drand.BeaconRequest")
	proto.RegisterType((*BeaconResponse)(nil), "drand.BeaconResponse")
	proto.RegisterType((*SetupPacket)(nil), "drand.SetupPacket")
	proto.RegisterType((*ResharePacket)(nil), "drand.ResharePacket")
	proto.RegisterType((*SyncRequest)(nil), "drand.SyncRequest")
	proto.RegisterType((*SyncResponse)(nil), "drand.SyncResponse")
}

func init() {
	proto.RegisterFile("drand/protocol.proto", fileDescriptor_e344a98fea1e2f3a)
}

var fileDescriptor_e344a98fea1e2f3a = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdd, 0x8a, 0x9b, 0x40,
	0x14, 0xc7, 0x99, 0x7c, 0x34, 0xf5, 0x68, 0x02, 0x9d, 0x5a, 0x08, 0xd2, 0xd0, 0x54, 0x28, 0xa4,
	0xd0, 0x9a, 0x36, 0x85, 0xd2, 0xeb, 0x94, 0x42, 0x6f, 0x5a, 0x82, 0xb9, 0xdb, 0x1b, 0x99, 0xd5,
	0x59, 0x95, 0x24, 0xce, 0xec, 0xcc, 0xb8, 0x4b, 0xde, 0x61, 0x9f, 0x6f, 0x9f, 0x67, 0x71, 0x46,
	0x63, 0x3e, 0xf6, 0x62, 0x2f, 0x04, 0xfd, 0x9d, 0x73, 0x18, 0xcf, 0x6f, 0xfe, 0xe0, 0x26, 0x82,
	0x14, 0xc9, 0x9c, 0x0b, 0xa6, 0x58, 0xcc, 0xb6, 0x81, 0x7e, 0xc1, 0x7d, 0x4d, 0x3d, 0x37, 0x16,
	0x7b, 0xae, 0xd8, 0x3c, 0xd9, 0xa4, 0xd5, 0x63, 0x8a, 0xde, 0x1b, 0x33, 0x42, 0x77, 0x5c, 0xed,
	0x0d, 0xf2, 0x77, 0x30, 0x5c, 0x52, 0x12, 0xb3, 0x22, 0xa4, 0xb7, 0x25, 0x95, 0x0a, 0xbb, 0xd0,
	0x17, 0xac, 0x2c, 0x92, 0x31, 0x9a, 0xa2, 0x59, 0x2f, 0x34, 0x1f, 0xf8, 0x13, 0x8c, 0xb8, 0xa0,
	0x77, 0x39, 0x2b, 0x65, 0x64, 0xca, 0x1d, 0x5d, 0x1e, 0x36, 0x34, 0xd4, 0x6d, 0x1f, 0xc0, 0xe6,
	0x44, 0xa8, 0x9c, 0x6c, 0x23, 0x99, 0xa7, 0xe3, 0xee, 0x14, 0xcd, 0x9c, 0x10, 0x6a, 0xb4, 0xce,
	0x53, 0xff, 0x3b, 0x8c, 0x9a, 0xe3, 0x24, 0x67, 0x85, 0xa4, 0xe7, 0x23, 0xe8, 0x62, 0xe4, 0x0b,
	0xd8, 0x6b, 0xaa, 0x4a, 0xbe, 0x22, 0xf1, 0x86, 0x2a, 0x3c, 0x81, 0x6e, 0xb2, 0x31, 0x7d, 0xf6,
	0xc2, 0x0e, 0xaa, 0xe5, 0x4c, 0x25, 0xac, 0xb8, 0xff, 0x0f, 0x86, 0x21, 0x95, 0x19, 0x11, 0xf4,
	0x45, 0xfd, 0x78, 0x02, 0x90, 0x0a, 0x56, 0xf2, 0x28, 0x23, 0x32, 0xd3, 0x4b, 0x59, 0xa1, 0xa5,
	0xc9, 0x5f, 0x22, 0x33, 0x7d, 0xf8, 0xbe, 0x88, 0x1b, 0x39, 0x13, 0x80, 0x1b, 0xc1, 0x76, 0xd1,
	0xb1, 0x21, 0xab, 0x22, 0x7a, 0x7d, 0xff, 0x01, 0x81, 0x63, 0xda, 0xeb, 0xe5, 0x2e, 0xb5, 0xa1,
	0xe7, 0xb4, 0x7d, 0x04, 0xe7, 0xd0, 0x56, 0x49, 0xe8, 0x68, 0x09, 0x76, 0xc3, 0xd6, 0x79, 0xda,
	0x5e, 0x4b, 0xf7, 0xf8, 0x5a, 0xde, 0x83, 0x25, 0xf3, 0xb4, 0x20, 0xaa, 0x14, 0x74, 0xdc, 0xd3,
	0x53, 0x2d, 0x58, 0x3c, 0x22, 0x78, 0xbd, 0xaa, 0xe3, 0x81, 0x3f, 0x43, 0x5f, 0x6b, 0xc4, 0x38,
	0xd0, 0x29, 0x08, 0x8e, 0xa4, 0x7a, 0x4e, 0xcd, 0xfe, 0x54, 0xc9, 0xc0, 0x5f, 0x61, 0x50, 0x3b,
	0xc4, 0x6e, 0x5d, 0x38, 0x71, 0x7a, 0xd6, 0xfe, 0x0b, 0xac, 0xff, 0xf4, 0xde, 0x5c, 0xeb, 0x61,
	0xe0, 0x24, 0x54, 0xde, 0xbb, 0x33, 0x5a, 0xeb, 0xf9, 0x09, 0x56, 0xa5, 0xeb, 0x77, 0x46, 0xf2,
	0xa2, 0xfd, 0xaf, 0xd6, 0xb7, 0xf7, 0xf6, 0x84, 0x99, 0xa9, 0x6f, 0x68, 0x39, 0xb8, 0x32, 0x31,
	0xbf, 0x7e, 0xa5, 0x43, 0xfc, 0xe3, 0x29, 0x00, 0x00, 0xff, 0xff, 0x02, 0x84, 0x68, 0x9e, 0x0c,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProtocolClient is the client API for Protocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProtocolClient interface {
	// Setup is doing the DKG setup phase
	Setup(ctx context.Context, in *SetupPacket, opts ...grpc.CallOption) (*Empty, error)
	// Reshare performs the resharing phase
	Reshare(ctx context.Context, in *ResharePacket, opts ...grpc.CallOption) (*Empty, error)
	// NewBeacon asks for a partial signature to another node
	NewBeacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*BeaconResponse, error)
	SyncChain(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Protocol_SyncChainClient, error)
}

type protocolClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocolClient(cc grpc.ClientConnInterface) ProtocolClient {
	return &protocolClient{cc}
}

func (c *protocolClient) Setup(ctx context.Context, in *SetupPacket, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/drand.Protocol/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) Reshare(ctx context.Context, in *ResharePacket, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/drand.Protocol/Reshare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) NewBeacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*BeaconResponse, error) {
	out := new(BeaconResponse)
	err := c.cc.Invoke(ctx, "/drand.Protocol/NewBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) SyncChain(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Protocol_SyncChainClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Protocol_serviceDesc.Streams[0], "/drand.Protocol/SyncChain", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolSyncChainClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Protocol_SyncChainClient interface {
	Recv() (*SyncResponse, error)
	grpc.ClientStream
}

type protocolSyncChainClient struct {
	grpc.ClientStream
}

func (x *protocolSyncChainClient) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProtocolServer is the server API for Protocol service.
type ProtocolServer interface {
	// Setup is doing the DKG setup phase
	Setup(context.Context, *SetupPacket) (*Empty, error)
	// Reshare performs the resharing phase
	Reshare(context.Context, *ResharePacket) (*Empty, error)
	// NewBeacon asks for a partial signature to another node
	NewBeacon(context.Context, *BeaconRequest) (*BeaconResponse, error)
	SyncChain(*SyncRequest, Protocol_SyncChainServer) error
}

// UnimplementedProtocolServer can be embedded to have forward compatible implementations.
type UnimplementedProtocolServer struct {
}

func (*UnimplementedProtocolServer) Setup(ctx context.Context, req *SetupPacket) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (*UnimplementedProtocolServer) Reshare(ctx context.Context, req *ResharePacket) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reshare not implemented")
}
func (*UnimplementedProtocolServer) NewBeacon(ctx context.Context, req *BeaconRequest) (*BeaconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBeacon not implemented")
}
func (*UnimplementedProtocolServer) SyncChain(req *SyncRequest, srv Protocol_SyncChainServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncChain not implemented")
}

func RegisterProtocolServer(s *grpc.Server, srv ProtocolServer) {
	s.RegisterService(&_Protocol_serviceDesc, srv)
}

func _Protocol_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Protocol/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).Setup(ctx, req.(*SetupPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_Reshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResharePacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).Reshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Protocol/Reshare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).Reshare(ctx, req.(*ResharePacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_NewBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeaconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).NewBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Protocol/NewBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).NewBeacon(ctx, req.(*BeaconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_SyncChain_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServer).SyncChain(m, &protocolSyncChainServer{stream})
}

type Protocol_SyncChainServer interface {
	Send(*SyncResponse) error
	grpc.ServerStream
}

type protocolSyncChainServer struct {
	grpc.ServerStream
}

func (x *protocolSyncChainServer) Send(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Protocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drand.Protocol",
	HandlerType: (*ProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Protocol_Setup_Handler,
		},
		{
			MethodName: "Reshare",
			Handler:    _Protocol_Reshare_Handler,
		},
		{
			MethodName: "NewBeacon",
			Handler:    _Protocol_NewBeacon_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncChain",
			Handler:       _Protocol_SyncChain_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "drand/protocol.proto",
}
